generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Plan {
  FREE
  BASIC
  PRO
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String
  accounts      Account[]
  sessions      Session[]
  plan          Plan      @default(FREE)
  timeZone      String
  clockType     Int       @default(12)
  poll          Poll[]
  vote          Vote[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Poll {
  id               String   @id @unique @default(cuid())
  question         String
  answers          Answer[]
  user             User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String?
  vote             Vote[]
  totalVotes       Int      @default(0)
  // settings
  isPublic         Boolean  @default(true)
  requireRecaptcha Boolean  @default(false)
  // 
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Answer {
  id        String   @id @unique @default(cuid())
  text      String
  votes     Int      @default(0)
  poll      Poll?    @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId    String?
  vote      Vote[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id        String   @id @unique @default(cuid())
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId  String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  poll      Poll?    @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
